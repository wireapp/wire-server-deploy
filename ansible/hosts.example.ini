[all]
cassandra01       ansible_host=X.X.X.X
cassandra02       ansible_host=X.X.X.X
cassandra03       ansible_host=X.X.X.X
elasticsearch01   ansible_host=X.X.X.X
elasticsearch02   ansible_host=X.X.X.X
elasticsearch03   ansible_host=X.X.X.X
minio01           ansible_host=X.X.X.X
minio02           ansible_host=X.X.X.X
minio03           ansible_host=X.X.X.X

# * 'ansible_host' is the IP to ssh into
# * set restund_network_interface to the interface that you want the process to bind to in the [all:vars] section
# * Optional: 'restund_peer_udp_advertise_addr' is the public IP to advertise for other turn servers if different than the ip on the 'restund_network_interface'
#             If using 'restund_peer_udp_advertise_addr', make sure that UDP (!) traffic from any restund server (including itself)
#             can reach that IP (for restund->restund communication)
restund01         ansible_host=X.X.X.X
restund02         ansible_host=X.X.X.X

# * 'ansible_host' is the IP to ssh into
# * 'ip' is the IP to bind to (if multiple network interfaces are in use)
#   omit 'ip' if you only have one network interface
#   FIXME: note that kubespray has a test for if IP == ANSIBLE_HOST?
kubenode01        ansible_host=X.X.X.X ip=Y.Y.Y.Y
kubenode02        ansible_host=X.X.X.X ip=Y.Y.Y.Y
kubenode03        ansible_host=X.X.X.X ip=Y.Y.Y.Y

# etcd resides on dedicated machines
# * etcd_member_name needs to be set on all hosts that run etcd (and must be different)
etcd01            ansible_host=X.X.X.X ip=Y.Y.Y.Y etcd_member_name=etcd1
etcd02            ansible_host=X.X.X.X ip=Y.Y.Y.Y etcd_member_name=etcd2
etcd03            ansible_host=X.X.X.X ip=Y.Y.Y.Y etcd_member_name=etcd3

### databases ###

[cassandra]
cassandra01
cassandra02
cassandra03

[cassandra_seed]
cassandra01
cassandra02

[cassandra:vars]
# cassandra_clustername: default

[elasticsearch]
elasticsearch01
elasticsearch02
elasticsearch03

[elasticsearch_master:children]
elasticsearch

[minio]
minio01
minio02
minio03

[minio:vars]
minio_access_key = "REPLACE_THIS_WITH_THE_DESIRED_ACCESS_KEY"
minio_secret_key = "REPLACE_THIS_WITH_THE_DESIRED_SECRET_KEY"

[restund]
restund01
restund02

[restund:vars]
## Set the network interface name for restund to bind to if you have more than one network interface
## If unset, defaults to the ansible_default_ipv4 (if defined) otherwise to eth0
# restund_network_interface = eth0

### KUBERNETES ###

[kube-master]
kubenode01
kubenode02
kubenode03

[kube-kubenode]
kubenode01
kubenode02
kubenode03

# must be an odd number of servers! (playbooks will fail otherwise)
# See https://coreos.com/etcd/docs/latest/v2/admin_guide.html#optimal-cluster-size
[etcd]
etcd01
etcd02
etcd03

[kube-node]
kubenode01
kubenode02
kubenode03

[k8s-cluster:children]
kube-node
kube-master

[all:vars]
### ANSIBLE section ###

# ansible_ssh_private_key_file = path/to/key

## default user to use to ssh
# ansible_user = ...

## use this if using python3 on the target machines
ansible_python_interpreter = /usr/bin/python3

## if you don't use ssh keys, enter the passwords to ssh and to become root:
# ansible_ssh_pass = ...
# ansible_become_pass = ...

### CASSANDRA section ###

is_aws_environment = False
## Set the network interface name for cassandra to bind to if you have more than one network interface
# cassandra_network_interface = eth0

### ELASTICSEARCH section ###

## Set this to a name of a network interface (e.g. 'eth0'). If unset, defaults to any "site-local" interface.
## see comments in elasticsearch.yml for details.
# elasticsearch_network_interface = "ens123"

## Set these in order to use an APT mirror other than the default.
# es_apt_key = "https://<mymirror>/linux/ubuntu/gpg"
# es_apt_url = "deb [trusted=yes] https://<mymirror>/apt bionic stable"

### MINIO section ###

## Set this to a name of a network interface (e.g. 'eth0'), on which you wish minio processes to talk to each other.
# minio_network_interface = "ens123"

### RESTUND section ###
# restund_network_interface = "..."

### KUBERNETES section (see kubespray documentation for details) ###

bootstrap_os = ubuntu
## set this to false if you have more than 3 nameservers
# docker_dns_servers_strict = false

[k8s-cluster:vars]
# 'flannel' is preferred on bare-metal setups, in case you wish to use `metallb`
kube_network_plugin = flannel

## You can update server-side versions for helm/kubernetes here on new releases.
## These server-side versions should match the client-side versions:
## See download_kubespray.yml for default server-side versions
## See download_cli_binaries.yml for default client-side versions
# kube_version = "v1.14.2"
# helm_version = "v2.13.1"
## download the kubeconfig after installing to localhost
kubeconfig_localhost = true
