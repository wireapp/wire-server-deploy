# The assethost will host assets other machines will download
assethost_host: "{{ hostvars['assethost'].ansible_host }}:8080"
# When set to true; will set up all the repos below before continuing
# to bootstrap; such that no network access is needed
offline: true

# This is copied from kubespray. We need it here too, as we run commands on hosts via the bastion too
ansible_ssh_common_args: "{% if 'bastion' in groups['all'] %} -o ProxyCommand='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -W %h:%p {{ hostvars['bastion']['ansible_user'] }}@{{ hostvars['bastion']['ansible_host'] }} {% if ansible_ssh_private_key_file is defined %}-i {{ ansible_ssh_private_key_file }}{% endif %} ' {% endif %}"

# This is used nowhere inside kubespray, only inside this file
# and our own playbooks
ubuntu_repos: "http://{{ assethost_host }}/debs-{{ ansible_distribution_release }}/public"
ubuntu_repo_base_url: "{{ ubuntu_repos }}"
ubuntu_repo_gpgkey: "{{ ubuntu_repos }}/gpg"

docker_ubuntu_repo_base_url: "{{ ubuntu_repos }}"
docker_ubuntu_repo_gpgkey: "{{ ubuntu_repos }}/gpg"
# docker_ubuntu_repo_repokey: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"

binaries_url: "http://{{ assethost_host }}/binaries"
nodelocaldns_ip: 10.233.0.10

kube_version: "v1.28.2"
etcd_version: "v3.5.9"

kubeadm_download_url: "{{ binaries_url }}/kubeadm"
kubectl_download_url: "{{ binaries_url }}/kubectl"
kubelet_download_url: "{{ binaries_url }}/kubelet"
cni_download_url: "{{ binaries_url }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz"
crictl_download_url: "{{ binaries_url }}/crictl-{{ crictl_version }}-linux-{{ image_arch }}.tar.gz"
calicoctl_download_url: "{{ binaries_url }}/calicoctl-linux-{{ image_arch }}"
calicoctl_alternate_download_url: "{{ binaries_url }}/calicoctl-linux-{{ image_arch }}"
calico_crds_download_url: "{{ binaries_url }}/{{ calico_version }}.tar.gz"
containerd_download_url: "{{ binaries_url }}/containerd-{{ containerd_version }}-linux-{{ image_arch }}.tar.gz"
runc_download_url: "{{ binaries_url }}/runc.{{ image_arch }}"
etcd_download_url: "{{ binaries_url }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz"
nerdctl_download_url: "{{ binaries_url }}/nerdctl-{{ nerdctl_version }}-linux-{{ image_arch }}.tar.gz"
cassandra_url: "{{ binaries_url }}/apache-cassandra-3.11.16-bin.tar.gz"
prometheus_jmx_url: "{{ binaries_url }}/jmx_prometheus_javaagent-0.10.jar"

# The elasticsearch role is turing-complete in determining the right repo,
# and elastic.co doesn't seem to advertise their -oss repo anymore either
# Just provide the .deb from the asset host
es_install_java: false
es_version: "6.8.23"
es_use_repository: false
es_custom_package_url: "{{ binaries_url }}/elasticsearch-oss-6.8.23.deb"

minio_server_artifact_url: "{{ binaries_url }}/minio.RELEASE.2023-07-07T07-13-57Z"
minio_server_artifact_checksum: sha256:f6d1aadf4baec1556880e659748d7fbc6bc8d2dac3554f816e95492d3881660a
minio_server_upgrade_from_checksums : [ "sha256:2c7e6774a9befbba6a126791f363550f8f14e34008e100d0e0e57e2ad9b2ab8c" ]

minio_client_artifact_url: "{{ binaries_url }}/mc.RELEASE.2023-07-07T05-25-51Z"
minio_client_artifact_checksum: sha256:205a2dc5a49dc467f78228c43c7d368e376c6cc14492597a7c4fe195c291f074
minio_client_upgrade_from_checksums : [ "sha256:59e184bd4e2c3a8a19837b0f0da3977bd4e301495a24e4a5d50e291728a1de51" ]

kubeconfig_localhost: true
#resolvconf_mode: none

# This defaults to true if http://169.254.169.254/latest/meta-data exists; which
# is also available in non-AWS. e.g. in Hetzner. Lets not let this autodetect in offline
is_aws_environment: False

# IP address for the logging (for example QRadar) server
syslog_target_ip: 12.34.56.78
