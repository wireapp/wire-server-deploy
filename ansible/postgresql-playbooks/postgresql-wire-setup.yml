---
- name: Create PostgreSQL database and user for wire-server
  hosts: postgresql_rw
  become: yes
  gather_facts: yes
  vars:
    pg_secret_name: wire-postgresql-external-secret
  tasks:
    - name: Validate kubectl is accessible
      ansible.builtin.shell: kubectl cluster-info
      register: kubectl_check
      delegate_to: localhost
      run_once: true
      failed_when: false
      changed_when: false

    - name: Fail if kubectl is not accessible
      ansible.builtin.fail:
        msg: |
          ERROR: Cannot access Kubernetes cluster!

          Please ensure:
          1. kubectl is installed and accessible
          2. KUBECONFIG is set: export KUBECONFIG=/path/to/kubeconfig
          3. kubectl can connect: kubectl cluster-info

          Current KUBECONFIG: {{ lookup('env', 'KUBECONFIG') | default('not set') }}
          Error: {{ kubectl_check.stderr | default('unknown') }}
      when: kubectl_check.rc != 0
      delegate_to: localhost
      run_once: true

    - name: Check if PostgreSQL database exists
      ansible.builtin.shell: |
        sudo -u postgres psql -c "SELECT 1 FROM pg_database WHERE datname = '{{ wire_dbname }}'" | grep -q '1 row'
      register: db_check_result
      failed_when: false
      changed_when: false

    - name: Create PostgreSQL database
      ansible.builtin.shell: |
        sudo -u postgres createdb "{{ wire_dbname }}"
      register: create_db_result
      failed_when: create_db_result.rc != 0 and 'already exists' not in create_db_result.stderr
      when: db_check_result.rc != 0

    - name: Display message if database already exists
      ansible.builtin.debug:
        msg: "PostgreSQL database '{{ wire_dbname }}' already exists."
      when: db_check_result.rc == 0

    - name: Check if PostgreSQL user exists
      ansible.builtin.shell: |
        sudo -u postgres psql -c "SELECT 1 FROM pg_roles WHERE rolname = '{{ wire_user }}'" | grep -q '1 row'
      register: user_check_result
      failed_when: false
      changed_when: false

    - name: Display message if user already exists
      ansible.builtin.debug:
        msg: "PostgreSQL user '{{ wire_user }}' already exists."
      when: user_check_result.rc == 0

    - name: Check if Kubernetes Secret exists
      ansible.builtin.shell: |
        kubectl get secret {{ pg_secret_name }} -n {{ wire_namespace | default('default') }} -o jsonpath='{.data.password}' 2>/dev/null | base64 -d
      register: k8s_secret_check
      delegate_to: localhost
      run_once: true
      failed_when: false
      changed_when: false

    - name: Retrieve password from existing Kubernetes Secret
      ansible.builtin.set_fact:
        wire_pass: "{{ k8s_secret_check.stdout }}"
        password_source: "kubernetes-secret"
      when:
        - k8s_secret_check.rc == 0
        - k8s_secret_check.stdout != ""
      run_once: true

    - name: Generate random strong password if secret doesn't exist
      ansible.builtin.set_fact:
        wire_pass: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
        password_generated: true
      when:
        - k8s_secret_check.rc != 0 or k8s_secret_check.stdout == ""
      run_once: true

    - name: Create Kubernetes Secret with generated password
      ansible.builtin.shell: |
        kubectl create secret generic {{ pg_secret_name }} \
          --namespace={{ wire_namespace | default('default') }} \
          --from-literal=password='{{ wire_pass }}' \
          --from-literal=username='{{ wire_user }}' \
          --from-literal=database='{{ wire_dbname }}' \
          --dry-run=client -o yaml | \
        kubectl label --local -f - \
          app=wire-server \
          component=postgresql \
          managed-by=ansible \
          --dry-run=client -o yaml | \
        kubectl apply -f -
      delegate_to: localhost
      run_once: true
      when:
        - password_generated is defined
        - password_generated

    - name: Create PostgreSQL user (if not exists)
      ansible.builtin.shell: |
        sudo -u postgres psql -c "CREATE USER \"{{ wire_user }}\" WITH PASSWORD '{{ wire_pass }}';"
      register: user_creation_result
      failed_when: user_creation_result.rc != 0 and 'already exists' not in user_creation_result.stderr
      when: user_check_result.rc != 0

    - name: Reset password for existing user
      ansible.builtin.shell: |
        sudo -u postgres psql -c "ALTER USER \"{{ wire_user }}\" WITH PASSWORD '{{ wire_pass }}';"
      when: user_check_result.rc == 0

    - name: Grant database privileges to the user
      ansible.builtin.shell: |
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE \"{{ wire_dbname }}\" TO \"{{ wire_user }}\";"

    - name: Grant CREATE on public schema to the user
      ansible.builtin.shell: |
        sudo -u postgres psql -d "{{ wire_dbname }}" -c "GRANT CREATE ON SCHEMA public TO \"{{ wire_user }}\";"

    - name: Grant USAGE on public schema to the user
      ansible.builtin.shell: |
        sudo -u postgres psql -d "{{ wire_dbname }}" -c "GRANT USAGE ON SCHEMA public TO \"{{ wire_user }}\";"

    - name: Set default privileges for future tables
      ansible.builtin.shell: |
        sudo -u postgres psql -d "{{ wire_dbname }}" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO \"{{ wire_user }}\";"

    - name: Set default privileges for future sequences
      ansible.builtin.shell: |
        sudo -u postgres psql -d "{{ wire_dbname }}" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO \"{{ wire_user }}\";"

    - name: Display PostgreSQL setup completion
      ansible.builtin.debug:
        msg: "{{ setup_completion_msg.split('\n') }}"
      vars:
        setup_completion_msg: |
          PostgreSQL setup completed:
            Database: {{ wire_dbname }}
            User: {{ wire_user }}
            Status: {% if user_check_result.rc != 0 %}User created{% else %}Password updated for existing user{% endif %}

          Kubernetes Secret: {{ pg_secret_name }}
            Namespace: {{ wire_namespace | default('default') }}
            Contains: password, username, database, host, port
          {% if password_generated is defined %}
            Password: Randomly generated 32-character strong password
            Stored securely in Kubernetes Secret (no hardcoded passwords)
            Access it via: kubectl get secret {{ pg_secret_name }} -n {{ wire_namespace | default('default') }} -o jsonpath='{.data.password}' | base64 --decode
          {% elif password_source is defined %}
            Password: Retrieved from existing Kubernetes Secret
            Access it via: kubectl get secret {{ pg_secret_name }} -n {{ wire_namespace | default('default') }} -o jsonpath='{.data.password}' | base64 --decode
          {% endif %}

    - name: Verify database and user setup
      ansible.builtin.shell: |
        PGPASSWORD='{{ wire_pass }}' psql -h {{ ansible_default_ipv4.address }} -U "{{ wire_user }}" -d "{{ wire_dbname }}" -c "SELECT 1"
      register: verification_result
      failed_when: false

    - name: Display verification status
      ansible.builtin.debug:
        msg: "✅ Database connection verified successfully"
      when: verification_result.rc == 0

    - name: Display verification failure
      ansible.builtin.debug:
        msg: "❌ Database connection failed: {{ verification_result.stderr }}"
      when: verification_result.rc != 0
