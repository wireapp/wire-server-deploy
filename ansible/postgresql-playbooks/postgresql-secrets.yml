---
- name: Manage PostgreSQL passwords in Kubernetes Secrets
  hosts: postgresql
  become: no
  gather_facts: yes
  vars:
    # Secret configurations
    pg_secrets:
      - name: "{{ repmgr_secret_name }}"
        namespace: "{{ repmgr_namespace }}"
        username: "{{ repmgr_user }}"
        database: "{{ repmgr_database }}"
        password_var: "repmgr_password"
        component: "repmgr"
        description: "repmgr HA management"
      - name: "{{ wire_pg_secret_name }}"
        namespace: "{{ wire_namespace | default('default') }}"
        username: "{{ wire_user }}"
        database: "{{ wire_dbname }}"
        password_var: "wire_pass"
        component: "wire-server"
        description: "wire-server application"

  tasks:
    # ===== KUBERNETES CONNECTIVITY VALIDATION =====
    - name: Validate kubectl is accessible
      ansible.builtin.shell: kubectl cluster-info
      register: kubectl_check
      delegate_to: localhost
      run_once: true
      failed_when: false
      changed_when: false

    - name: Fail if kubectl is not accessible
      ansible.builtin.fail:
        msg: |
          ERROR: Cannot access Kubernetes cluster!

          Please ensure:
          1. kubectl is installed and accessible
          2. KUBECONFIG is set: export KUBECONFIG=/path/to/kubeconfig
          3. kubectl can connect: kubectl cluster-info

          Current KUBECONFIG: {{ lookup('env', 'KUBECONFIG') | default('not set') }}
          Error: {{ kubectl_check.stderr | default('unknown') }}
      when: kubectl_check.rc != 0
      delegate_to: localhost
      run_once: true

    # ===== SECRET MANAGEMENT FOR EACH CREDENTIAL =====
    - name: Check if Kubernetes Secrets exist
      ansible.builtin.shell: |
        kubectl get secret {{ item.name }} -n {{ item.namespace }} -o jsonpath='{.data.password}' 2>/dev/null | base64 -d
      register: k8s_secret_checks
      delegate_to: localhost
      run_once: true
      failed_when: false
      changed_when: false
      loop: "{{ pg_secrets }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Process secret check results and set passwords
      ansible.builtin.set_fact:
        "{{ item.item.password_var }}": "{{ item.stdout }}"
        "{{ item.item.password_var }}_source": "kubernetes-secret"
      when:
        - item.rc == 0
        - item.stdout != ""
      run_once: true
      loop: "{{ k8s_secret_checks.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    - name: Generate random passwords for secrets that don't exist
      ansible.builtin.set_fact:
        "{{ item.item.password_var }}": "{{ lookup('password', '/dev/null', chars=['ascii_letters', 'digits'], length=32) }}"
        "{{ item.item.password_var }}_generated": true
      when:
        - item.rc != 0 or item.stdout == ""
      run_once: true
      loop: "{{ k8s_secret_checks.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      no_log: true  # Don't log generated passwords

    - name: Display password sources
      ansible.builtin.debug:
        msg: |
          PostgreSQL Secrets Status:
          {% for secret in pg_secrets %}
          - {{ secret.description }}:
              Secret: {{ secret.name }}
              Namespace: {{ secret.namespace }}
              Status: {% if hostvars[groups['postgresql'][0]][secret.password_var + '_source'] is defined %}Retrieved from existing secret{% else %}Generated new password{% endif %}
          {% endfor %}
      run_once: true

    - name: Create or update Kubernetes Secrets
      ansible.builtin.shell: |
        kubectl create secret generic {{ item.item.name }} \
          --namespace={{ item.item.namespace }} \
          --from-literal=password='{{ hostvars[groups['postgresql'][0]][item.item.password_var] }}' \
          --from-literal=username='{{ item.item.username }}' \
          --from-literal=database='{{ item.item.database }}' \
          --dry-run=client -o yaml | \
        kubectl label --local -f - \
          app=postgresql \
          component={{ item.item.component }} \
          managed-by=ansible \
          --dry-run=client -o yaml | \
        kubectl apply -f -
      delegate_to: localhost
      run_once: true
      when:
        - hostvars[groups['postgresql'][0]][item.item.password_var + '_generated'] is defined
        - hostvars[groups['postgresql'][0]][item.item.password_var + '_generated']
      loop: "{{ k8s_secret_checks.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    # ===== PROPAGATE FACTS TO ALL POSTGRESQL HOSTS =====
    - name: Ensure password facts are available on all postgresql hosts
      ansible.builtin.set_fact:
        "{{ item.password_var }}": "{{ hostvars[groups['postgresql'][0]][item.password_var] }}"
      loop: "{{ pg_secrets }}"
      loop_control:
        label: "{{ item.password_var }}"

    - name: Display secret management completion
      ansible.builtin.debug:
        msg: |
          ===== POSTGRESQL SECRETS SETUP COMPLETE =====
          Host: {{ inventory_hostname }}

          Secrets configured:
          {% for secret in pg_secrets %}
          - {{ secret.description }}:
              Secret: {{ secret.name }}
              Namespace: {{ secret.namespace }}
              Access: kubectl get secret {{ secret.name }} -n {{ secret.namespace }} -o jsonpath='{.data.password}' | base64 --decode
          {% endfor %}

          All passwords are now available as Ansible facts for subsequent playbooks.
      run_once: true
