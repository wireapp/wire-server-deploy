```mermaid
sequenceDiagram
    participant P1 as postgresql1 (Primary)
    participant P2 as postgresql2 (Replica)
    participant P3 as postgresql3 (Replica)
    participant SB as Split-Brain Monitor
    participant FS as Fence Script

    Note over P1,FS: Normal Operations - PostgreSQL 17 HA Cluster

    P1->>P2: WAL streaming replication
    P1->>P3: WAL streaming replication
    P2->>P1: repmgr heartbeat (2s interval)
    P3->>P1: repmgr heartbeat (2s interval)
    SB->>SB: Timer check every 30s - no split-brain

    Note over P1,FS: Scenario 1: Primary Failure with Automatic Failover

    rect rgb(255, 230, 230)
        Note over P1: POSTGRESQL1 FAILS

        P2--xP1: Connection lost
        P3--xP1: Connection lost

        Note over P2,P3: repmgr reconnection attempts (6 attempts × 5s = 30s)

        P2->>P3: Cluster status check
        P3->>P2: Primary unreachable confirmed

        Note over P2,P3: Priority-based promotion (P2=100 > P3=50)

        P2->>P2: repmgr promotes to primary

        loop Automatic Promotion
            P2->>P2: pg_promote() execution
            P2->>P2: Update repmgr metadata
        end

        P2->>P2: Promotion successful - NEW PRIMARY

        Note over P2,FS: Event-Driven Fence Response

        P2->>FS: Event: repmgr_failover_promote
        FS->>FS: simple_fence.sh logs promotion

        P2->>P3: I am new primary (priority 100)
        P3->>P2: Following new primary
        P3->>P2: WAL streaming from new primary
    end

    Note over P1,FS: Scenario 2: Split-Brain Detection & Prevention

    rect rgb(255, 255, 200)
        P1->>P1: PostgreSQL1 restarts/recovers
        P1->>P1: Believes it is still primary

        SB->>P1: Timer check: Am I primary? (pg_is_in_recovery = false)
        SB->>P1: Check replicas: count(pg_stat_replication) = 0

        Note over SB: ISOLATED PRIMARY DETECTED

        SB->>P2: Query: SELECT pg_is_in_recovery() → false
        SB->>P3: Query: SELECT pg_is_in_recovery() → true

        Note over SB: SPLIT-BRAIN CONFIRMED: Multiple primaries!

        SB->>SB: EMERGENCY PROTECTION SEQUENCE
        SB->>P1: sudo systemctl mask postgresql@17-main.service
        SB->>P1: sudo systemctl stop postgresql@17-main.service
        SB->>SB: Log: "Split-brain detected and resolved"

        Note over P1,P2: Conflict prevented - only P2 accepts writes

        alt Cluster Status After Protection
            P1->>P1: postgresql1 MASKED/STOPPED
            P2->>P2: postgresql2 primary * running
            P3->>P3: postgresql3 standby running
        end
    end

    Note over P1,FS: Scenario 3: Network Partition Recovery

    rect rgb(230, 255, 230)
        Note over P1,P3: Network partition: P1 isolated from P2,P3

        SB->>P1: Timer detects isolation (no replicas)
        SB->>P2: Cross-node query fails (network partition)
        SB->>P3: Cross-node query fails (network partition)

        SB->>P1: Cannot verify - assume split-brain risk
        SB->>P1: MASK and STOP PostgreSQL service

        Note over P2,P3: P2,P3 continue normal operations

        P2->>P3: WAL streaming continues
        P3->>P2: Replication healthy

        Note over P1,FS: Network restored

        SB->>P2: Network restored - can query other nodes
        SB->>P3: Confirm P2 is legitimate primary

        Note over P1: Ready for manual rejoin
    end

    Note over P1,FS: Scenario 4: Proper Node Rejoin with Auto-Recovery

    rect rgb(230, 230, 255)
        P1->>P1: Admin unasks service manually
        P1->>P1: systemctl unmask postgresql@17-main.service

        P1->>P2: repmgr node rejoin --force-rewind

        P2->>P1: Timeline validation and WAL data
        P1->>P1: pg_rewind execution (sync timelines)
        P1->>P1: Restart as standby

        P1->>P2: Connect as replica to current primary

        Note over P1,FS: Automatic Service Recovery

        P1->>FS: Event: node_rejoin success
        FS->>FS: simple_fence.sh processes rejoin event
        FS->>P1: Auto-unmask PostgreSQL service
        FS->>FS: Log: "Node successfully rejoined - service unmasked"

        P2->>P1: WAL streaming to rejoined replica
        P2->>P3: WAL streaming continues

        SB->>SB: Timer confirms: No split-brain, healthy cluster

        Note over P1,FS: Full 3-node cluster restored
    end

    Note over P1,FS: Scenario 5: Priority-Based Failover Chain

    rect rgb(240, 240, 255)
        Note over P2: POSTGRESQL2 (current primary) fails

        P3->>P2: Connection lost (only remaining replica)
        P1->>P2: Connection lost (if rejoined)

        Note over P3: Auto-promotion (next highest priority)

        P3->>P3: repmgr promotes P3 to primary
        P3->>FS: Event: repmgr_failover_promote

        alt If P1 available
            P1->>P3: Follow new primary P3
        end

        Note over P3: PostgreSQL3 now primary (Priority 50)

        Note over P1,FS: When P2 recovers, it rejoins as replica
    end

    Note over P1,FS: System Capabilities Summary
    Note over P1,FS: • 30-second split-brain detection with automatic protection
    Note over P1,FS: • Priority-based failover: P1(150) → P2(100) → P3(50)
    Note over P1,FS: • Event-driven fence script with auto-recovery
    Note over P1,FS: • Zero data loss with pg_rewind timeline management
    Note over P1,FS: • Comprehensive monitoring and audit logging
```